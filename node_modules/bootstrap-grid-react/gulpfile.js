var gulp = require('gulp');
var react = require('gulp-react');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var browserify = require('browserify');
var source = require('vinyl-source-stream');
var es = require('event-stream');

// jsx to js
gulp.task('react', function() {
  return gulp.src('./lib/*.jsx')
    .pipe(react())
    .pipe(gulp.dest('./dist/components/'));
});

gulp.task('browserify', function() {
  var entryName;
  var files = [
    './dist/components/container.js',
    './dist/components/row.js',
    './dist/components/col.js'
  ];

  function splitPath(pathName) {
    return pathName.substring(pathName.lastIndexOf('/') + 1, pathName.length);
  }

  var tasks = files.map(function(entry) {
    entryName = splitPath(entry);
    return browserify({ entries: [entry] })
      .bundle()
      .on('error', function(err) {
        return console.error(err);
        this.emit('end');
      })
      .pipe(source(entryName))
      .pipe(rename({
          extname: '.bundle.js'
      }))
      .pipe(gulp.dest('dist/'));
    });
  return es.merge.apply(null, tasks);
});

// Minify all browserified bundles into bundle.min.js
gulp.task('minify', function() {
  return gulp.src([
      './dist/container.bundle.js',
      './dist/row.bundle.js',
      './dist/col.bundle.js'
    ])
    .pipe(concat('bundle.min.js'))
    .pipe(gulp.dest('./dist'))
    .pipe(uglify())
    .pipe(gulp.dest('./dist'));
});

gulp.task('watch', function() {
  gulp.watch('lib/*.jsx', ['react']);
  gulp.watch('dist/components/*.js', ['browserify']);
});

// Run default with npm run gulp
gulp.task('default', ['react', 'browserify', 'minify', 'watch']);
